type int8_t 1 [[i8]]
type int16_t 2 [[i16]]
type int32_t 4 [[i32]]
type int64_t 8 [[i64]]
type uint8_t 1 [[u8]]
type uint16_t 2 [[u16]]
type uint32_t 4 [[u32]]
type uint64_t 8 [[u64]]
type char8_t 1
type char16_t 2
type float 4 [[f32]]
type double 8 [[f64]]

struct Vector3 {
    float x
    float y
    float z
}

struct Vector4 {
    float x
    float y
    float z
    float w
}

struct Matrix4x4 {
    float m[16]
}

class CString {
    int32_t referenceCount @ 0x8
    uint32_t length @ 0x10
    uint32_t capacity @ 0x14
    char16_t buffer[70] @ 0x20 [[utf16*]]
}

class UnknownPtr 0x200{}

class CCharacter {
    class CParameter {
        class CMemberString 0x20 {
            CString* value @ 0x8
        }

        class CMemberChar 0x18 {
            int8_t value @ 0x8
        }

        class CMemberUChar 0x18 {
            uint8_t value @ 0x8
        }

        class CMemberUShort 0x18 {
            uint16_t value @ 0x8
        }

        class CMemberULong 0x18 {
            uint32_t value @ 0x8
        }

        class CMemberUInt64 0x20 {
            uint64_t value @ 0x8
        }

        class CMemberFloat 0x18 {
            float value @ 0x8
        }

        CMemberString name @ 0x30
        CMemberString title;
        CMemberString engTitle;
        CMemberULong type;
        CMemberUChar skinColor;
        CMemberUShort eyeType;
        CMemberUChar eyeColor;
        CMemberUChar mouthType;
        CMemberULong status;
        CMemberULong statusEx;
        CMemberULong statusEx2;
        CMemberFloat scaleHeight;
        CMemberFloat scaleFatness;
        CMemberFloat scaleUpper;
        CMemberFloat scaleLower;
        CMemberULong regionID;
        CMemberULong positionX;
        CMemberULong positionY;
        CMemberChar direction;
        CMemberULong battleState;
        CMemberUChar weaponSet;
        CMemberULong extra1;
        CMemberULong extra2;
        CMemberULong extra3;
        CMemberFloat combatPower;
        CMemberString motionType;
        CMemberUChar oddEyeLeftColor;
        CMemberUChar oddEyeRightColor;
        CMemberFloat life;
        CMemberFloat lifeMaxBase;
        CMemberFloat lifeDamaged;
        CMemberFloat lifeMaxMod;
        CMemberFloat mana;
        CMemberFloat manaMaxBase;
        CMemberFloat manaMaxMod;
        CMemberFloat stamina;
        CMemberFloat staminaMaxBase;
        CMemberFloat staminaMaxMod;
        CMemberFloat food;
        CMemberFloat foodMinRatio;
        CMemberUShort level;
        CMemberULong cumulatedLevel;
        CMemberUShort maxLevel;
        CMemberUShort rebirthCount;
        CMemberUShort lifeTimeSkill;
        CMemberUInt64 experienceInt;
        CMemberUShort age;
		CMemberFloat strBase;
		CMemberFloat strMod;
		CMemberFloat dexBase;
		CMemberFloat dexMod;
		CMemberFloat intBase;
		CMemberFloat intMod;
		CMemberFloat willBase;
		CMemberFloat willMod;
		CMemberFloat luckBase;
		CMemberFloat luckMod;
		CMemberFloat lifeMaxByFood;
		CMemberFloat manaMaxByFood;
		CMemberFloat staminaMaxByFood;
		CMemberFloat strMaxByFood;
		CMemberFloat dexMaxByFood;
		CMemberFloat intMaxByFood;
		CMemberFloat willMaxByFood;
		CMemberFloat luckMaxByFood;
        CMemberFloat dorcha @ 0x1220;
        CMemberFloat dorchaMaxBase; 
        CMemberFloat tuairim; // For Bachram Boost
        CMemberFloat tuairimMaxBase; // For Bachram Boost
    }

    class CAction {
        class CAnimatorContext {
            class CFramework 0x200 {
                Vector3 position @ 0xD0
            }

            CFramework* framework @ 0x8
        }

        CCharacter* character @ 0x48
        CAnimatorContext* animatorContext
    }

    class CSkillMgr {
        class CActiveSkill {
            uint16_t skillID @ 0x18
            uint8_t charges
            uint8_t state +9
        }

        CActiveSkill* skillInfo @ 0x8
    }

    class CConditionMgr 0x50 {
        class CCondition 0x25 {
            int32_t statusCount @ 0x4
        }

        CCondition* condition @ 0x10
    }

    class CEquipmentItemInfo 0x58 {
        uint32_t classID
        uint32_t color1 + 0xC
        uint32_t color2
        uint32_t color3
        uint32_t color4 + 0x14
        uint32_t color5
        uint32_t color6
    }

    class CEquipment {
        CEquipmentItemInfo itemInfo[20] @ 0x6C
    }
	
	
	class CNewEgoWeapon  {
		class EgoWeaponDetail 0x68{
			int16_t v0;
			int16_t v4;
			int16_t egoId;
			uint64_t v8 @8;
			uint64_t entityId ;
			CString* name;
			int16_t relation;
			int16_t level @ 0x2C;
			int16_t totalEP ;
			int16_t remainEP ;
			UnknownPtr* ptr @ 0x38;
			int16_t missionProgress @0x40;
			UnknownPtr* ptr2 @ 0x48;
			uint16_t value50 @ 0x50;
			uint16_t value58 @ 0x58;
			uint16_t value5A @ 0x5A;
			uint16_t value5C @ 0x5C;
			//int32_t value60;
			//int32_t value64;
			
			//int32_t v60 @ 0x60;
			uint16_t value60 @ 0x60;
			uint16_t value62 @ 0x62;
			uint16_t value64 @ 0x64;
			
			
		}
		class EgoListPtr {
			EgoWeaponDetail egoWeapons[6];
		}
		uint64_t* vftable
		CCharacter* character;
		uint64_t charId;
		EgoListPtr* egoList;
		uint64_t* listEnd;
		uint64_t* capacityEnd;
		//UnknownPtr* unknownPtr_2;
		//UnknownPtr* unknownPtr_3;
		CString* str1 @ 0x350;
		CString* str2;
		CString* str3;
	}

    uint64_t* entityID @ 0x8
    CParameter* parameter @ 0xD8
    CAction* action
    CSkillMgr* skill 
    CConditionMgr* condition +32
	CNewEgoWeapon* newEgoWeapon@ 0x430
    CEquipment* equipment @ 0x488
    uint64_t targetID @ 0x538
    uint64_t mouseTarget +8
}

class CItem 0x1d0{
    struct SItemDBDesc {
        CString* type @ 0x8
		UnknownPtr* ptr30 @ 0x30
        CString* displayName @ 0x38
		UnknownPtr* ptr40 @ 0x40
        CString* name +16
        CString* description +8
        CString* longDescription 
        uint16_t maxStackCount @ 0xcc
    }

    uint64_t* entityID @ 0x8
    uint32_t inventoryID
    uint32_t itemID
    uint32_t color1
    uint32_t color2
    uint32_t color3
    uint32_t color4 +4
    uint32_t color5
    uint32_t color6
    uint32_t stackCount
    uint32_t positionX + 4
    uint32_t positionY
	UnknownPtr* ptr68 @ 0x68;
	uint8_t int70
	uint8_t int71
	uint16_t int74
	uint32_t unknown_10000
    uint32_t price + 48
    uint32_t sellPrice
    uint32_t durability +4
    uint32_t maxDurability
    uint32_t originalDurability
	uint32_t magicCircleDuration @ 0x80
	uint32_t magicCircleMaxDuration @ 0x84
	UnknownPtr* ptrd0 @ 0xd0 ;
	UnknownPtr* ptre0 @ 0xe0 ;
	UnknownPtr* ptre8 @ 0xe8 ;
	UnknownPtr* ptrf8 @ 0xf8 ;
    SItemDBDesc* dbDesc @ 0x100
	UnknownPtr* ptr108;
    uint64_t ownerID @ 0x130
	UnknownPtr* ptr138 ;
	UnknownPtr* ptr150 @ 0x150 ;
	UnknownPtr* ptr168 @ 0x168;
	
    CString* name @ 0x170
	CString* str178
	CString* str180
	CString* str188
	UnknownPtr* ptr198 @ 0x198
	CString* str1b0 @ 0x1b0
	int32_t value1b4
	uint16_t value1b8
	uint16_t value1bc
	uint16_t value1c0
	UnknownPtr* ptr1c8@ 0x1c8
}

class CEntityList 0x100 {
    class CItemList {
        class CItemListNode {
            CItemListNode* next
            CItem* item @ 0x18
        }

        CItemListNode** root @ 0x10
        uint32_t count
    }

    class CCharacterList {
        class CCharacterListNode 0x28 {
            CCharacterListNode* next
            CCharacter* character @ 0x18
        }

        CCharacterListNode** root @ 0x10
        uint32_t count
    }

    CItemList items @ 0x8
    CCharacterList characters @ 0x48
}

class CRenderer 0x100 {
    class CCamera {
        class CCameraState {
            Vector3 target @ 0x10
            Vector3 position +4
            Vector4 forward +8
            float drawDistance
            float zNear
            float zFar
            float fov
            float screenWidth
            float screenHeight
            float aspectRatio +28
            Matrix4x4 transformMatrix @ 0x14C
        }

        CCameraState* state;
    }

    CCamera* camera @ 0x38
}

class CWorld 0x200 {
    uint64_t localPlayerID @ 0x160
}

class CAccount 0x50 {
}
