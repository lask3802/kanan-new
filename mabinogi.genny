type int8_t 1 [[i8]]
type int16_t 2 [[i16]]
type int32_t 4 [[i32]]
type int64_t 8 [[i64]]
type uint8_t 1 [[u8]]
type uint16_t 2 [[u16]]
type uint32_t 4 [[u32]]
type uint64_t 8 [[u64]]
type char8_t 1
type char16_t 2
type float 4 [[f32]]
type double 8 [[f64]]

struct Vector3 {
    float x
    float y
    float z
}

struct Vector4 {
    float x
    float y
    float z
    float w
}

struct Matrix4x4 {
    float m[16]
}

//x64 fixed
class CString {
	uint64_t* vftable
    int32_t referenceCount
	uint32_t allocThreadId
    uint32_t length
    uint32_t capacity
    char16_t buffer[70] @ 0x20 [[utf16*]]
}

//x64 fixed
class CCharacter {
    class CParameter {
        class CMemberString 0x20 {
            CString* value @ 0x8
        }

        class CMemberChar 0x18 {
            int8_t value @ 0x8
        }

        class CMemberUChar 0x18 {
            uint8_t value @ 0x8
        }

        class CMemberUShort 0x18 {
            uint16_t value @ 0x8
        }

        class CMemberULong 0x18 {
            uint32_t value @ 0x8
        }

        class CMemberUInt64 0x20 {
            uint64_t value @ 0x8
        }

        class CMemberFloat 0x18 {
            float value @ 0x8
        }

        CMemberString name @ 0x30
        CMemberString title; //0x0030
        CMemberString engTitle; //0x0040
        CMemberULong type; //0x0050
        CMemberUChar skinColor; //0x0060
        CMemberUShort eyeType; //0x006C
        CMemberUChar eyeColor; //0x0078
        CMemberUChar mouthType; //0x0084
        CMemberULong status; //0x0090
        CMemberULong statusEx; //0x00A0
        CMemberULong statusEx2; //0x00B0
        CMemberFloat scaleHeight; //0x00C0
        CMemberFloat scaleFatness; //0x00D0
        CMemberFloat scaleUpper; //0x00E0
        CMemberFloat scaleLower; //0x00F0
        CMemberULong regionID; //0x0100
        CMemberULong positionX; //0x0110
        CMemberULong positionY; //0x0120
        CMemberChar direction; //0x0130
        CMemberULong battleState; //0x013C
        CMemberUChar weaponSet; //0x014C
        CMemberULong extra1; //0x0158
        CMemberULong extra2; //0x0168
        CMemberULong extra3; //0x0178
        CMemberFloat combatPower; //0x0188
        CMemberString motionType; //0x0198
        CMemberUChar oddEyeLeftColor; //0x01A8
        CMemberUChar oddEyeRightColor; //0x01B4
        CMemberFloat life; //0x01C0
        CMemberFloat lifeMaxBase; //0x01D0
        CMemberFloat lifeDamaged; //0x01E0
        CMemberFloat lifeMaxMod; //0x01F0
        CMemberFloat mana; //0x0200
        CMemberFloat manaMaxBase; //0x0210
        CMemberFloat manaMaxMod; //0x0220
        CMemberFloat stamina; //0x0230
        CMemberFloat staminaMaxBase; //0x0240
        CMemberFloat staminaMaxMod; //0x0250
        CMemberFloat food; //0x0260
        CMemberFloat foodMinRatio; //0x0270
        CMemberUShort level; //0x0280
        CMemberULong cumulatedLevel; //0x028C
        CMemberUShort maxLevel; //0x029C
        CMemberUShort rebirthCount; //0x02A8
        CMemberUShort lifeTimeSkill; //0x02B4
        CMemberUInt64 experienceInt; //0x02C0
        CMemberUShort age; //0x02D8
        CMemberFloat dorcha @ 0x1220; //0x0A7C
        CMemberFloat dorchaMaxBase; //0x0A8C
        CMemberFloat tuairim; //0x2090 For Bachram Boost
        CMemberFloat tuairimMaxBase; //0x0AAC For Bachram Boost
    }
	//not verified
    class CAction {
        class CAnimatorContext {
            class CFramework {
                Vector3 position @ 172
            }

            CFramework* framework @ 0x8
        }

        CCharacter* character @ 0x48
        CAnimatorContext* animatorContext
    }
	//not verified
    class CSkillMgr {
        class CActiveSkill {
            uint16_t skillID @ 0x18
            uint8_t charges
            uint8_t state +9
        }

        CActiveSkill* skillInfo @ 0x8
    }
	//not verified
    class CConditionMgr 0x50 {
        class CCondition 0x28 {
            int32_t statusCount @ 0x4
        }

        CCondition* condition @ 0x8
    }
	//not verified
    class CEquipmentItemInfo 0x50 {
        uint32_t classID @0x14
        uint32_t color1 @ 0x24
        uint32_t color2
        uint32_t color3
        uint32_t color4 +4
        uint32_t color5
        uint32_t color6
    }
	
    class CEquipment {
        CEquipmentItemInfo itemInfo[20]
    }
	uint64_t* vftable;
    uint64_t* entityID @ 0x8
    CParameter* parameter @ 0xD8
    CAction* action
    CSkillMgr* skill 
    CConditionMgr* condition +0x20
    CEquipment* equipment @ 0x488
    uint64_t targetID @ 0x538//temp
    uint64_t mouseTarget @0x548
}

//x64 fixed
class CItem {
    struct SItemDBDesc {
		uint64_t* vftable
        CString* type
		CString* str_28 @ 0x28
        CString* displayName @0x50
        CString* name +8
        CString* description 
        uint16_t maxStackCount @ 0xbc
    }
	uint64_t* vftable
    uint64_t* entityID
    uint32_t inventoryID; //0x0008
    uint32_t itemID; //0x000C
    uint32_t color1; //0x0010
    uint32_t color2; //0x0014
    uint32_t color3; //0x0018
    uint32_t color4 +4; //0x0020
    uint32_t color5; //0x0024
    uint32_t color6; //0x0028
    uint32_t stackCount; //0x002C
    uint32_t positionX + 4; //0x0034
    uint32_t positionY; //0x0038
    uint32_t price +48; //0x0064
    uint32_t sellPrice; //0x0068
    uint32_t durability +4; //0x0070
    uint32_t maxDurability; //0x0074
    uint32_t originalDurability; //0x0078
    SItemDBDesc* dbDesc +116; //0x00D8
    uint64_t ownerID +0x28; //0x00F8
    CString* name +56; //0x0124
}

// 0x4a04410
class CEntityList {
    class CItemList {
        class CCItemListNode {}
        class CItemListNode {
            class CItemListNodeEntry {
                CItem* item @ 0x18; 
				
            }

            CItemListNodeEntry* entry
            CItemListNode* next
        }
		float float_0 
        CItemListNode* root @ 0x8
        uint32_t count
    }

    class CCharacterList {
        class CCharacterListNode {}
        class CCharacterListNode {
            class CCharacterListNodeEntry {
			
                CCharacter* character @ 0x18;     
            }

            CCharacterListNodeEntry* entry
            CCharacterListNode* next
        }
		float float_1
        CCharacterListNode* root @ 0x8
        uint32_t count
    }

    CItemList items @ 0x10
    CCharacterList characters @ 0x50
}

class CEntityListPtr {
    CEntityList* entityList
}

//not verified
class CRenderer {
    class CCamera {
        class CCameraState {
            Vector3 target @ 0xC
            Vector3 position +4
            Vector4 forward +8
            float drawDistance
            float zNear
            float zFar
            float fov
            float screenWidth
            float screenHeight
            float aspectRatio +28
            Matrix4x4 transformMatrix @ 0x14C
        }

        CCameraState* state;
    }

    CCamera* camera @ 0x24
}

class CRendererPtr {
    CRenderer* renderer
}

class CWorld {
    uint64_t localPlayerID @ 0x160
}

class CWorldPtr {
    CWorld* world
}

class CAccount 0x50 {
}

class CAccountPtr {
    CAccount* account
}